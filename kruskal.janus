/*
 * Outline for Kruskal
 */

// in-place quick sort

procedure partition2(int a[], int l, int r, int p, int ord[])
  local int j = l
    from  j = l
    loop  if a[0][j] <= a[0][r] then
            p += 1
            local int k = p  // slide a[p..j-1] to the right by one, and move a[j] to position p
              from  k = p
              loop  a[0][k] <=> a[0][j]
                    a[1][k] <=> a[1][j]
                    a[2][k] <=> a[2][j]
                    ord[k] <=> ord[j]
                    k += 1
              until k = j
            delocal int k = j  
          fi (p >= l) && (ord[p] >= ord[j])
          j += 1
    until j = r + 1
  delocal int j = r + 1

// xor-copy to p the index of the maximum of ord[l..r]
procedure max(int p, int ord[], int l, int r)
  local stack gb = nil
    local int m = 0
      call max_sub(m,ord,l,r,gb)
      p ^= m
      uncall max_sub(m,ord,l,r,gb)
    delocal int m = 0
  delocal stack gb = nil

procedure max_sub(int m, int ord[], int l, int r, stack gb)
  m ^= l
  local int i = l + 1
    from  i = l + 1
    loop  if ord[i] >= ord[m] then
            push(m,gb)
            m ^= i
            push(1,gb)
          else
            push(0,gb)
          fi top(gb) = 1
          i += 1
    until i = r + 1
  delocal int i = r + 1

procedure qsort2(int a[], int l, int r, int p[])
  if l < r then
    local int q = l - 1     // q remembers where to divide
      call partition2(a,l,r,q,p)
      call qsort2(a,l,q-1,p)
      call qsort2(a,q+1,r,p)
      call max(q,p,l,r)     // zero clear q
    delocal int q = 0
  fi l < r

// Setting to p[] identity permutation of length n
procedure id_perm(int p[], int n)
  local int i = 0
    from  i = 0
    loop  p[i] ^= i
          i += 1
    until i = n
  delocal int i = n

 
/*
 * makeedgelist
 * Returns a list of all the edges in a graph G.
 */
procedure makeedgelist(int G[], int edgelist[], int s)
    local int i = 0, int j = 0
    
    from i = 0 do
        from j = i do
            if G[i][j] != 0 then
                edgelist[0][s] += G[i][j]
                edgelist[1][s] += i+1
                edgelist[2][s] += j+1
                s += 1
            fi G[i][j] != 0
            j += 1
        until j = size(G)
        i += 1
        j -= size(G) - i
    until i = size(G)
    
    delocal int i = size(G), int j = size(G)

procedure shortenlist(int list[], int reslist[], int s)
    local int i = 0
    from i = 0 do
        reslist[0][i] += list[0][i]
        reslist[1][i] += list[1][i]
        reslist[2][i] += list[2][i]
        i += 1
    until i = s
    delocal int i = s

procedure findset(int a, int b, int array[], int visited[], int visit, int retval)
    visited[a] += visit
    visit += 1
    if array[a][b] != 0  then
        retval += 1
    else
        local int i = 0
        from i = 0 do
            if array[a][i] != 0 && a != i && visited[i] = 0 && retval != 1 then
                call findset(i, b, array, visited, visit, retval)
            fi array[a][i] != 0 && a != i && visited[i] = visit
            i += 1
        until i = size(array)
        delocal int i = size(array)
    fi array[a][b] != 0
    visit -= 1

procedure union(int a, int b, int weight, int array[])
    array[a][b] += weight
    if a != b then
        array[b][a] += weight
    fi a != b

/*
 * mstkruskal.
 * Takes a weighted, undirected graph G and returns a set A containing a
 * forest representing a single minimum spanning tree.
 * G is represented as an adjacency matrix of size n x n, where n is the amount
 * of nodes in G.
 * A is represented like a weighted, directed graph in an adjacency matrix and
 * must be of size n x n.
 */
procedure mstkruskal(int G[], int A[])    
    // Gather all of the edges into a list.
    local int edgelist[3][size(G) * size(G)] = {{0}, {0}, {0}}
    local int s = 0
    call makeedgelist(G, edgelist, s)
    local int p[s] = {0}
    call id_perm(p, s)
    // Shorten the edgelist to only contain the actual amount of edges.
    local int edges[3][s] = {{0}, {0}, {0}}
    call shortenlist(edgelist, edges, s)
    call qsort2(edges, 0, s - 1, p)
    
    local int i = 0
    local int r = 0
    local int visit = 0
    local int visited[size(G)] = {0}
    from i = 0 do
        call findset(edges[1][i]-1, edges[2][i]-1, A, visited, visit, r)
        if r = 0 then
            uncall findset(edges[1][i]-1, edges[2][i]-1, A, visited, visit, r)
            call union(edges[1][i]-1, edges[2][i]-1, edges[0][i], A)
        else
            uncall findset(edges[1][i]-1, edges[2][i]-1, A, visited, visit, r)
        fi A[edges[1][i]-1][edges[2][i]-1] != 0
        i += 1
    until i = s
    delocal int visited[size(G)] = {0}
    delocal int visit = 0
    delocal int r = 0
    delocal int i = s
    
    uncall qsort2(edges, 0, s - 1, p)
    
    uncall shortenlist(edgelist, edges, s)
    delocal int edges[3][s] = {{0}, {0}, {0}}
    uncall id_perm(p, s)
    delocal int p[s] = {0}
    uncall makeedgelist(G, edgelist, s)
    delocal int s = 0
    delocal int edgelist[3][size(G) * size(G)] = {{0}, {0}, {0}}

procedure main()
    int G[][] = {{0, 2, 0, 5, 0},
               {2, 0, 0, 0, 4},
               {0, 0, 0, 4, 0},
               {5, 0, 4, 0, 7},
               {0, 4, 0, 7, 0}}
    int A[5][5] = {{0}, {0}, {0}, {0}, {0}}
    
    call mstkruskal(G, A)