/*
 * Adjacency list, version 2
 * The list is represented as an integer array and a two-dimensional array.
 *
 * adjacent contains all adjacent nodes of each node, grouped by nodes,
 * 
 * nodes contains pointers to the starting element of each list in the first
 * spot of each array, and can contain additional information about each node
 * in the following spots.
 */
 
 /*
 * getlist gets the contents of a single list in the adjacency list.
 *
 * Parameters:
 * int G[]      A list of adjacency list elements
 * int start    A pointer to the first element to be extracted
 * int end      A pointer to the last element to be extracted
 * int res[]    A list to store the returned elements in
 * 
 * Postcondition:
 * A copy of a the items in a list in the adjacency list.
 */
 
procedure getlist(int G[], int start, int end, int res[])
    // Elements of the wanted list are loaded into res
    local int r = start
    from r = start do
        res[r - start] += G[r]
        r += 1
    until r = end
    delocal int r = end
 
procedure main()
    // Graph with 5 nodes represented as an adjacency list
    int G[] = {2, 4, 1, 5, 4, 1, 3, 5, 2, 4}
    int nodes[size(G)] = {0, 2, 4, 5, 8}
    // Below is the same nodes with an extra field for node information
    int nodes2[size(G)] = {{0, 0},
                           {2, 0},
                           {4, 0},
                           {5, 0},
                           {8, 0}}
    
    // Container arrays for the adjacent nodes of each node
    int a[nodes[1]]
    int b[nodes[2]-nodes[1]]
    int c[nodes[3]-nodes[2]]
    int d[nodes[4]-nodes[3]]
    int e[size(G)-nodes[4]]
    
    
    // Transfer each list of adjacent nodes to their respective container array
    call getlist(G, nodes[0], nodes[1], a)
    call getlist(G, nodes[1], nodes[2], b)
    call getlist(G, nodes[2], nodes[3], c)
    call getlist(G, nodes[3], nodes[4], d)
    call getlist(G, nodes[4], nodes(G), e)
