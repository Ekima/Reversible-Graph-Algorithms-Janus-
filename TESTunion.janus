/*
 * findset recursively searches an adjacency matrix for a connection between a
 * node a and a node b.
 *
 * Parameters:
 * int a            First node of edge.
 * int b            Second node of edge.
 * int array[]      An adjacency matrix.
 * int visited[]    An empty array of size |V|
 * int visit        A counter value initialized to 0
 * int retval       The return value
 *
 * Returns:
 * A returnvalue retval, 1 if a and b are connected by edges and 0 if they are
 * not.
 */
procedure findset(int a, int b, int array[],
                  int visited[], int visit, int retval)
    // Visited and visit are used to keep track of which nodes have been visited
    // Once all nodes have been visited, we stop the recursion
    visited[a] += visit
    visit += 1
    
    if array[a][b] != 0  then
        retval += 1 // The element has been found, we return 1
    else
        local int i = 0
        from i = 0 do
            // Check for edges of current node a, call function recursively
            if array[a][i] != 0 && a != i && visited[i] = 0 && retval != 1 then
                call findset(i, b, array, visited, visit, retval)
            fi array[a][i] != 0 && a != i && visited[i] = visit
            i += 1
        until i = size(array)
        delocal int i = size(array)
    fi array[a][b] != 0
    visit -= 1

/*
 * addedge creates a weighted edge between two nodes, a and b, in a
 * two-dimensional array / adjacency matrix. array[a][b] should be empty before
 * adding the edge for a proper result. a and b should be within the range of
 * the array.
 *
 * Parameters:
 * int a            First node of edge.
 * int b            Second node of edge.
 * int weight       Weight of edge to be added.
 * int array[]      An adjacency matrix. 
 *
 * Returns:
 * An adjacency matrix with a new edge between a and b.
 */
procedure addedge(int a, int b, int weight, int array[])
    array[a][b] += weight
    if a != b then // Symmetric edge only added when not in the diagonal
        array[b][a] += weight
    fi a != b

procedure main()
    int A[5][5]
    int retval
    int visited[size(A)]
    int visit = 1
    
    call addedge(0, 0, 2, A)
    call addedge(0, 3, 3, A)
    call addedge(3, 4, 1, A)
    
    call findset(0, 1, A, visited, visit, retval)
    printf("Edge is not in set (0): %d", retval)
    uncall findset(0, 1, A, visited, visit, retval)
    
    call findset(0, 0, A, visited, visit, retval)
    printf("Edge is in set (1): %d", retval)
    uncall findset(0, 0, A, visited, visit, retval)
    
    call findset(0, 4, A, visited, visit, retval)
    printf("Edge is in set (1): %d", retval)
    uncall findset(0, 4, A, visited, visit, retval)